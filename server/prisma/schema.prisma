// 这是您的 Prisma 架构文件，
// 在文档中了解更多信息：https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// 用户角色枚举
enum Role {
  ADMIN // 管理员
  USER // 普通用户
}

// 用户模型
model User {
  id            String          @id @default(cuid())
  email         String          @unique
  username      String          @unique
  nickname      String?
  password      String
  role          Role            @default(USER)
  avatarUrl     String?
  settings      Settings?
  platforms     UserPlatform[]
  UserAssistant UserAssistant[]
  Assistant     Assistant[]
  orders        Order[]
  emailVerified Boolean         @default(false)
  ServiceUsage  ServiceUsage[] // 用户对服务的使用记录
  Membership    Membership? // 用户的会员资格
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model UserPlatform {
  id        Int      @id @default(autoincrement())
  platform  String
  apiKey    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Settings {
  id        Int      @id @default(autoincrement())
  userId    String   @unique
  theme     String?
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id              String    @id @default(cuid())
  userId          String
  pointsPurchased Int
  paymentAmount   Decimal
  paymentStatus   String
  updateStatus    String
  retries         Int
  name            String
  payType         String
  notifyUrl       String
  paymentTime     DateTime?
  aoid            String?
  User            User      @relation(fields: [userId], references: [id])
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Assistant {
  id           Int             @id @default(autoincrement())
  name         String
  authorId     String
  author       User            @relation(fields: [authorId], references: [id])
  avatar       String?
  config       String          @db.Text
  description  String
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  isPublic     Boolean         @default(false)
  users        UserAssistant[]
  forkedFrom   Assistant?      @relation("ForkedFrom", fields: [forkedFromId], references: [id])
  forkedFromId Int?
  forks        Assistant[]     @relation("ForkedFrom")
  lastSyncAt   DateTime?
}

model UserAssistant {
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  assistant   Assistant @relation(fields: [assistantId], references: [id], onDelete: Cascade)
  assistantId Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@id([userId, assistantId])
}

enum ContactType {
  EMAIL
  PHONE
}

model VerificationCode {
  id        Int         @id @default(autoincrement())
  contact   String      @unique
  type      ContactType
  createdAt DateTime    @default(now())
  code      String
}

model Config {
  id    Int    @id @default(autoincrement())
  key   String @unique
  value String
}

model Membership {
  id               String         @id @default(cuid())
  userId           String         @unique
  user             User           @relation(fields: [userId], references: [id])
  membershipTierId Int
  membershipTier   MembershipTier @relation(fields: [membershipTierId], references: [id])
  startDate        DateTime       @default(now())
  endDate          DateTime
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

// 服务类型枚举
enum ServiceType {
  GPT35
  GPT4
}

model ServiceUsage {
  id          Int         @id @default(autoincrement())
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  serviceType ServiceType
  date        DateTime    @default(now())
  createdAt   DateTime    @default(now())
}

model MembershipTier {
  id         Int          @id @default(autoincrement())
  name       String
  services   Json // 使用 JSON 来存储服务的限制，如 { "A": { "daily": 100, "monthly": 1000 }, "B": { "monthly": 50 } }
  Membership Membership[]
}
