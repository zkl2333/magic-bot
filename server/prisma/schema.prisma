// 这是您的 Prisma 架构文件，
// 在文档中了解更多信息：https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// 用户角色枚举
enum Role {
  ADMIN // 管理员
  USER // 普通用户
}

// 用户模型
model User {
  id                String             @id @default(cuid())
  email             String             @unique
  username          String             @unique
  nickname          String?
  password          String
  role              Role               @default(USER)
  avatarUrl         String?
  settings          Settings?
  platforms         UserPlatform[]
  userAssistants    UserAssistant[]
  createdAssistants Assistant[]
  orders            Order[]
  emailVerified     Boolean            @default(false)
  serviceUsages     ServiceUsage[] // 用户对服务的使用记录
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  userSubscriptions UserSubscription[]
}

model UserPlatform {
  id        Int      @id @default(autoincrement())
  platform  String
  apiKey    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Settings {
  id        Int      @id @default(autoincrement())
  userId    String   @unique
  theme     String?
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id              String    @id @default(cuid())
  userId          String
  pointsPurchased Int
  paymentAmount   Decimal
  paymentStatus   String
  updateStatus    String
  retries         Int
  name            String
  payType         String
  notifyUrl       String
  paymentTime     DateTime?
  aoid            String?
  User            User      @relation(fields: [userId], references: [id])
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Assistant {
  id           Int             @id @default(autoincrement())
  name         String
  authorId     String
  author       User            @relation(fields: [authorId], references: [id])
  avatar       String?
  config       String          @db.Text
  description  String
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  isPublic     Boolean         @default(false)
  users        UserAssistant[]
  forkedFrom   Assistant?      @relation("ForkedFrom", fields: [forkedFromId], references: [id])
  forkedFromId Int?
  forks        Assistant[]     @relation("ForkedFrom")
  lastSyncAt   DateTime?
}

model UserAssistant {
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  assistant   Assistant @relation(fields: [assistantId], references: [id], onDelete: Cascade)
  assistantId Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@id([userId, assistantId])
}

enum ContactType {
  EMAIL
  PHONE
}

model VerificationCode {
  id        Int         @id @default(autoincrement())
  contact   String      @unique
  type      ContactType
  createdAt DateTime    @default(now())
  code      String
}

model Config {
  id    Int    @id @default(autoincrement())
  key   String @unique
  value String
}

model Subscription {
  id                        Int                        @id @default(autoincrement())
  name                      String                     @default("Free") // 例如 "Free", "Plus", "Premium"
  duration                  Int
  isMonthly                 Boolean
  userSubscriptions         UserSubscription[]
  subscriptionServiceLimits SubscriptionServiceLimit[] // 限制关联
}

model UserSubscription {
  id             Int          @id @default(autoincrement())
  userId         String
  user           User         @relation(fields: [userId], references: [id])
  subscriptionId Int
  subscription   Subscription @relation(fields: [subscriptionId], references: [id])
  startDate      DateTime
  expirationDate DateTime
}

model SubscriptionServiceLimit {
  id             Int          @id @default(autoincrement())
  subscriptionId Int
  subscription   Subscription @relation(fields: [subscriptionId], references: [id])
  serviceId      Int
  service        Service      @relation(fields: [serviceId], references: [id])
  usageLimits    Int // 添加使用限制，例如对于 "Service A", Free 订阅可能是 10, Plus 是 100
}

model Service {
  id            Int                        @id @default(autoincrement())
  name          String // 例如 "Service A", "Service B"
  description   String
  type          String
  serviceUsages ServiceUsage[]
  serviceLimits SubscriptionServiceLimit[] // 添加服务限制关联
}

model ServiceUsage {
  id          Int      @id @default(autoincrement())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  serviceId   Int
  service     Service  @relation(fields: [serviceId], references: [id])
  usageCount  Int // 这里存储用户对各项服务的使用次数
  description String
  date        DateTime @default(now())
}
