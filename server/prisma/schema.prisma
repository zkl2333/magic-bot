// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum ServiceType {
  GPT35
  GPT4
}

model User {
  id            String          @id @default(cuid())
  email         String          @unique
  username      String          @unique
  nickname      String?
  password      String
  role          Role            @default(USER)
  avatarUrl     String?
  settings      Settings?
  platforms     UserPlatform[]
  UserAssistant UserAssistant[]
  Assistant     Assistant[]
  orders        Order[]
  emailVerified Boolean         @default(false)
  ServiceUsage  ServiceUsage[]
  Membership    Membership[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model UserPlatform {
  id        Int      @id @default(autoincrement())
  platform  String
  apiKey    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Settings {
  id        Int      @id @default(autoincrement())
  userId    String   @unique
  theme     String?
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id              String    @id @default(cuid())
  userId          String
  pointsPurchased Int
  paymentAmount   Decimal
  paymentStatus   String
  updateStatus    String
  retries         Int
  name            String
  payType         String
  notifyUrl       String
  paymentTime     DateTime?
  aoid            String?
  User            User      @relation(fields: [userId], references: [id])
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Assistant {
  id           Int             @id @default(autoincrement())
  name         String
  authorId     String
  author       User            @relation(fields: [authorId], references: [id])
  avatar       String?
  config       String          @db.Text
  description  String
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  isPublic     Boolean         @default(false)
  users        UserAssistant[]
  forkedFrom   Assistant?      @relation("ForkedFrom", fields: [forkedFromId], references: [id])
  forkedFromId Int?
  forks        Assistant[]     @relation("ForkedFrom")
  lastSyncAt   DateTime?
}

model UserAssistant {
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  assistant   Assistant @relation(fields: [assistantId], references: [id], onDelete: Cascade)
  assistantId Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@id([userId, assistantId])
}

enum ContactType {
  EMAIL
  PHONE
}

model VerificationCode {
  id        Int         @id @default(autoincrement())
  contact   String      @unique
  type      ContactType
  createdAt DateTime    @default(now())
  code      String
}

model Config {
  id    Int    @id @default(autoincrement())
  key   String @unique
  value String
}


model Service {
  id                    Int                     @id @default(autoincrement())
  name                  String                  @unique
  type                  ServiceType
  usages                ServiceUsage[]
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  MembershipTierService MembershipTierService[]
}

model MembershipTier {
  id         Int                     @id @default(autoincrement())
  name       String
  isMonthly  Boolean                 @default(false)
  duration   Int
  services   MembershipTierService[]
  Membership Membership[]
}

model MembershipTierService {
  id           Int            @id @default(autoincrement())
  limit        Int
  membershipId Int
  membership   MembershipTier @relation(fields: [membershipId], references: [id])
  serviceId    Int
  service      Service        @relation(fields: [serviceId], references: [id])
}

model ServiceUsage {
  id          Int      @id @default(autoincrement())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  serviceId   Int
  service     Service  @relation(fields: [serviceId], references: [id])
  description String?
  date        DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Membership {
  id        String         @id @default(cuid())
  user      User           @relation(fields: [userId], references: [id])
  userId    String
  tierId    Int
  tier      MembershipTier @relation(fields: [tierId], references: [id])
  startDate DateTime       @default(now())
  endDate   DateTime // The end date should be calculated when a new Membership is created
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}
