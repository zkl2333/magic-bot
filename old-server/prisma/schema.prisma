// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model User {
  id            String          @id @default(cuid())
  email         String          @unique
  username      String          @unique
  nickname      String?
  password      String
  role          Role            @default(USER)
  avatarUrl     String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  settings      Settings?
  account       Account?
  platforms     UserPlatform[]
  UserAssistant UserAssistant[]
  Assistant     Assistant[]
  emailVerified Boolean         @default(false)
}

model UserPlatform {
  id        Int      @id @default(autoincrement())
  platform  String
  apiKey    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Settings {
  id        Int      @id @default(autoincrement())
  userId    String   @unique
  theme     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Account {
  id           Int           @id @default(autoincrement())
  userId       String        @unique
  balance      Float         @default(0)
  transactions Transaction[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  user         User          @relation(fields: [userId], references: [id])
}

model Transaction {
  id          Int      @id @default(autoincrement())
  accountId   Int
  type        String
  amount      Float
  description String?
  createdAt   DateTime @default(now())
  account     Account  @relation(fields: [accountId], references: [id])
}

model Assistant {
  id           Int             @id @default(autoincrement())
  name         String
  authorId     String
  author       User            @relation(fields: [authorId], references: [id])
  avatar       String?
  config       String          @db.Text
  description  String
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  isPublic     Boolean         @default(false)
  users        UserAssistant[]
  forkedFrom   Assistant?      @relation("ForkedFrom", fields: [forkedFromId], references: [id])
  forkedFromId Int?
  forks        Assistant[]     @relation("ForkedFrom")
  lastSyncAt   DateTime?
}

model UserAssistant {
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  assistant   Assistant @relation(fields: [assistantId], references: [id], onDelete: Cascade)
  assistantId Int

  @@id([userId, assistantId])
}

enum ContactType {
  EMAIL
  PHONE
}

model VerificationCode {
  id        Int         @id @default(autoincrement())
  contact   String      @unique
  type      ContactType
  createdAt DateTime    @default(now())
  code      String
}

model Config {
  id    Int    @id @default(autoincrement())
  key   String @unique
  value String
}
